This function sorts the 'pa_sizes' attribute terms according to a predefined order. If a term is not found in the predefined order, it falls back to sorting numerically. The function is hooked into WooCommerce to apply this custom sorting whenever product terms are retrieved.

function custom_attribute_sort_order_size( $terms, $post_id, $taxonomy ) {
    if ( $taxonomy == 'pa_sizes' ) {
        $order = array( 'XXS', 'XS', 'S', 'M', 'L', 'XL', '2XL', '3XL', '4XL', '5XL', '6XL', '7XL', '8XL' );

        usort( $terms, function ( $a, $b ) use ( $order ) {
            // Check if terms are objects or strings
            $a_name = is_object($a) ? $a->name : $a;
            $b_name = is_object($b) ? $b->name : $b;

            $a_index = array_search( $a_name, $order );
            $b_index = array_search( $b_name, $order );

            if ( $a_index !== false && $b_index !== false ) {
                return $a_index <=> $b_index;
            }

            $a_value = preg_replace( '/[^0-9.]/', '', $a_name );
            $b_value = preg_replace( '/[^0-9.]/', '', $b_name );

            return $a_value <=> $b_value;
        } );
    }

    return $terms;
}
add_filter( 'woocommerce_get_product_terms', 'custom_attribute_sort_order_size', 10, 3 );


This Function sorts alphabetically

function custom_attribute_sort_order_standard_finish( $terms, $post_id, $taxonomy ) {
    if ( $taxonomy == 'pa_standard-finish' ) {
        usort( $terms, function ( $a, $b ) {
            // Check if terms are objects or strings
            $a_name = is_object($a) ? $a->name : $a;
            $b_name = is_object($b) ? $b->name : $b;

            // Use strnatcasecmp for natural order case-insensitive comparison
            return strnatcasecmp( $a_name, $b_name );
        } );
    }

    return $terms;
}
add_filter( 'woocommerce_get_product_terms', 'custom_attribute_sort_order_standard_finish', 10, 3 );




The reorder_product_attributes function takes the attributes of a WooCommerce variable product and reorders them based on a specified order. If the product is not a variable product, it returns the attributes unchanged. The specified order in this example prioritizes pa_standard-finish and pa_special-finish, placing them at the beginning of the array, with any remaining attributes appended afterwards.

// Order Standard before Special Finish
add_filter('woocommerce_product_get_attributes', 'reorder_product_attributes', 10, 2);

function reorder_product_attributes($attributes, $product) {
    if (!$product->is_type('variable')) {
        return $attributes;
    }

    $desired_order = array('pa_standard-finish', 'pa_special-finish');
    $reordered_attributes = array();

    foreach ($desired_order as $attr_name) {
        if (isset($attributes[$attr_name])) {
            $reordered_attributes[$attr_name] = $attributes[$attr_name];
            unset($attributes[$attr_name]);
        }
    }

    // Add any remaining attributes
    $reordered_attributes += $attributes;

    return $reordered_attributes;
}
